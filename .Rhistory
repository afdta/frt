.libpaths
.libpaths()
.libPaths()
help(startup)
install.packages(ggplot2)
install.packages('ggplot2')
install.packages('ggplot2')
install.packages('ggplot2')
library(ggplot2)
install.packages("sp")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
install.packages("reshape2")
quit()
for(i in 1:100){}
?rnorm
for(i in 1:10){
plot(rnorm(20),rnorm(20))
}
for(i in 1:1000000){
plot(rnorm(20),rnorm(20))
}
for(i in 1:1000000){
plot(rnorm(20),rnorm(20))
}
a<-c(125,2,-3,4,555,6,7,8,9,10)
quantile(a,0.15)
a<-c(125,2,-3,0,555,6,7,8,9,10)
quantile(a,0.15)
quantile(a,0.15)
q()
a<-"1bc"
a
substr(a,2,2)
substr(a,2,3)
hash <- function(s){
val <- 7
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- regexpr(sub,u)
print(pos)
}
}
hash("leepd")
hash <- function(s){
val <- 7
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- regexpr(sub,u)
print(sub)
}
}
hash("leepd")
hash <- function(s){
val <- 7
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- regexpr(sub,u)
print(pos*1)
}
}
hash("leepd")
regexpr("a","cdabr")
class(regexpr("a","cdabr"))
regexpr("a","cdabr")*1
c(regexpr("a","cdabr"))
as.numeric(regexpr("a","cdabr"))
hash <- function(s){
val <- 7
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- regexpr(sub,u)
print(pos*5)
}
}
hash("leepd")
hash <- function(s){
val <- 7
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- regexpr(sub,u)
print(val <- val*pos)
}
}
hash("leepd")
hash <- function(s){
val <- 7
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- c(regexpr(sub,u))
print(pos)
}
}
hash("leepd")
hash <- function(s){
val <- 7
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- c(regexpr(sub,u))
val <- (val*37) + pos
}
return(val)
}
hash("leepadg")
q()
hash <- function(s){
val <- 7
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- c(regexpr(sub,u))
val <- (val*36) + pos
}
return(val)
}
hash(leepadg)
hash("leepadg")
hash <- function(s){
val <- 7
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- c(regexpr(sub,u))
val <- (val*37) + pos
}
return(val)
}
hash("leepadg")
hash <- function(s){
val <- 6
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- c(regexpr(sub,u))
val <- (val*37) + pos
}
return(val)
}
hash("leepadg")
hash <- function(s){
val <- 7
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- c(regexpr(sub,u))
val <- (val*37) + pos
}
return(val)
}
hash("leepadg")
hash <- function(s){
val <- 7
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- c(regexpr(sub,u))
val <- (val*36.8) + pos
}
return(val)
}
hash("leepadg")
hash <- function(s){
val <- 7
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- c(regexpr(sub,u))
val <- (val*36.9) + pos
}
return(val)
}
hash("leepadg")
hash <- function(s){
val <- 7
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- c(regexpr(sub,u))
val <- (val*37) + pos
}
return(val)
}
hash("leepadg")
#Question from SO job posting
#http://careers.stackoverflow.com/jobs/52420/software-developer-fog-creek-software?a=11VKM2TOo
#from target int to string
#dealing with ints
t = 910897038977002
n = 9
hash <- function(s){
val <- 7
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- c(regexpr(sub,u))
val <- (val*37) + pos
}
return(val)
}
hash("leepadg")
hash <- function(s){
val <- 7
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- c(regexpr(sub,u))-1
val <- (val*37) + pos
}
return(val)
}
hash("leepadg")
library("rgdal")
library(rgdal)
install.packages("rgdal")
.libpaths()
.lib_paths()
.lib_path()
.libPaths()
install.packages("rgdal")
install.packages("reshape2")
install.packages("ggplot2")
a<-1
library(ggmap)
library(Cairo)
gc <- geocode('1700 17th Street NW, Washington, DC')
google <- get_googlemap('Washington, DC', zoom = 10, size=c(1920,1920))
detroit <- get_googlemap('Troy, MI', zoom = 9, size=c(1920,1920))
slu <- get_googlemap('South Lake Union, Seattle, WA', zoom = 10, size=c(1920,1920))
bbox <- as.numeric(attr(slu, 'bb'))[c(2,1,4,3)]
names(bbox) <- c('left','bottom','right','top')
stamen <- get_stamenmap(bbox, zoom = 10, maptype="toner")
CairoJPEG("slu.jpg",6400,6400,quality=100)
ggmap(stamen)
dev.off()
ggmap(slu)
slu <- get_googlemap('South Lake Union, Seattle, WA', zoom = 15, size=c(1920,1920))
ggmap(slu)
bbox <- as.numeric(attr(slu, 'bb'))[c(2,1,4,3)]
bbox
names(bbox) <- c('left','bottom','right','top')
stamen <- get_stamenmap(bbox, zoom = 15, maptype="toner")
CairoJPEG("slu.jpg",6400,6400,quality=100)
ggmap(stamen)
dev.off()
q()
hash("leepadg")
#Question from SO job posting
#http://careers.stackoverflow.com/jobs/52420/software-developer-fog-creek-software?a=11VKM2TOo
#from target int to string
#dealing with ints
library(gtools)
t = 910897038977002
n = 9
A <- 1:16
grid <- permutations(16,9,A,repeats.allowed=TRUE)
gc()
t/2
t/3
t/4
t/5
?%
?%%
?`%''
;
`
`%%`
?`%%`
viablePos <- function(val){
for(i in 0:15){
if((val-15)%%37 == 0){
print(i)
}
}
}
viablePos(t)
viablePos <- function(val){
for(i in 0:15){
if((val-i)%%37 == 0){
print(i)
}
}
}
viablePos(t)
vector()
numeric()
numeric(0)
viablePos <- function(val){
viables <- vector("integer",0)
for(i in 0:15){
if((val-i)%%37 == 0){
c(viables,i)
}
}
return(viables)
}
viablePos(t)
viablePos <- function(val){
viables <- vector("integer",0)
for(i in 0:15){
if((val-i)%%37 == 0){
viables <- c(viables,i)
}
}
return(viables)
}
viablePos(t)
t = 910897038977002
n = 9
#A <- 1:16
#grid <- permutations(16,9,A,repeats.allowed=TRUE)
#brute force is too memory hungry
hash <- function(s){
val <- 7
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- c(regexpr(sub,u))-1
val <- (val*37) + pos
}
return(val)
}
viablePos <- function(val){
viables <- vector("integer",0)
for(i in 0:15){
if((val-i)%%37 == 0){
viables <- c(viables,i)
}
}
return(viables)
}
viablePos(t)
print(record)
a<-list(a=1:2)
b<-list(b=1:2)
a
b
c(a,b)
viablePos <- function(val){
viables <- list()
for(i in 0:15){
if((val-i)%%37 == 0){
viables <- c(viables,list(val=i,next=(val-i)/37))
}
}
return(viables)
}
viablePos <- function(val){
viables <- list()
for(i in 0:15){
if((val-i)%%37 == 0){
viables <- c( viables, list(val=i,next=(val-i)/37) )
}
}
return(viables)
}
viablePos <- function(val){
viables <- list()
for(i in 0:15){
if((val-i)%%37 == 0){
viables <- c( viables, list(val=i,nxt=(val-i)/37) )
}
}
return(viables)
}
viablePos <- function(val){
viables <- list()
for(i in 0:15){
if((val-i)%%37 == 0){
viables <- c( viables, list(val=i,"nxt"=(val-i)/37) )
}
}
return(viables)
}
viablePos(t)
a<-list()
c(a,list(a=1,b=2,c=3),list(a=2))
c(a,list(c(1,2,3)),list(a=2))
#This function should find all viable values for the given value
viablePos <- function(val){
viables <- list()
for(i in 0:15){
if((val-i)%%37 == 0){
viables <- c( viables, list(list(val=i,nxt=(val-i)/37)) )
}
}
return(viables)
}
viablePos(t)
length(viablePos(t))
q()
t = 910897038977002
n = 9
#A <- 1:16
#grid <- permutations(16,9,A,repeats.allowed=TRUE)
#brute force is too memory hungry
hash <- function(s){
val <- 7
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- c(regexpr(sub,u))-1
val <- (val*37) + pos
}
return(val)
}
viablePos <- function(val){
viables <- list()
for(i in 0:15){
if((val-i)%%37 == 0){
viables <- c( viables, list(list(val=i,nxt=(val-i)/37)) )
}
}
return(viables)
}
viablePos(t)
?`++`
a<-list
a<-list()
length(a)
viablePos <- function(val,viables=NULL,iter=1){
if(is.null(viables)){viables <- list()}
for(i in 0:15){
if((val-i)%%37 == 0){
viables <- c( viables, list(list(val=i,nxt=(val-i)/37,iter=iter)) )
}
}
return(viables)
}
viablePos(t)
q()
t = 910897038977002
n = 9
#A <- 1:16
#grid <- permutations(16,9,A,repeats.allowed=TRUE)
#brute force is too memory hungry
hash <- function(s){
val <- 7
u <- "acdegilmnoprstuw"
for(i in 1:nchar(s)){
sub <- substr(s,i,i)
pos <- c(regexpr(sub,u))-1
val <- (val*37) + pos
}
return(val)
}
#This function should find all viable values for the given value
viablePos <- function(val,viables=NULL,iter=1){
if(is.null(viables)){viables <- list()}
nxt <- vector("integer",0)
for(i in 0:15){
if((val-i)%%37 == 0){
viables <- c( viables, list(list(val=i,nxt=(val-i)/37,iter=iter)) )
nxt <- c(nxt,((val-i)/37))
}
}
for(j in nxt){
}
return(viables)
}
#This function should recurse through the options to determine which path is viable
pathFinder <- function(val,record=NULL){
if(is.null(record){record <- vector("integer",0)})
vals <- viablePos(val)
i<-length(vals)
while(i>=1){
}
}
viablePos(t)
q()
setwd("/home/alec/Dropbox/Projects/Brookings/DataViz/FreightFlows")
flows <- read.csv("FreightFlows - Markets.csv",stringsAsFactors=FALSE,row.names=NULL)
#check that we have all metros
#metpops <- metropops(TRUE,vintage="2013")
#origins <- unique(flows[c("CBSA_Code","CBSA_Name")])
#missing <- merge(metpops,origins,by="CBSA_Code",all=TRUE)
#LOOK AT TOTAL VOLUMES
totforeign <- aggregate(flows[c("Exports","Imports","Volume")],by=flows[c("Trader_Name","Trader_Code")],sum)
totforeign <- totforeign[order(totforeign$Volume,decreasing=TRUE),]
totforeign$name <- factor(totforeign$Trader_Name,totforeign$Trader_Name)
totdomestic <- aggregate(flows[c("Exports","Imports","Volume")],by=flows[c("CBSA_Code","CBSA_Name")],sum)
totdomestic <- totdomestic[order(totdomestic$Volume,decreasing=TRUE),]
totdomestic$name <- factor(totdomestic$CBSA_Name,totdomestic$CBSA_Name)
totdomestic$rank <- 1:nrow(totdomestic)
options(scipen=999)
library(ggplot2)
base <- ggplot(data=totforeign)
base + geom_bar(aes(y=Volume,x=name),stat="identity") + theme(axis.text.x = element_text(angle=90,hjust=1))
cum=0
for(i in 1:nrow(totdomestic)){
totdomestic[i,"cum"] <- cum+totdomestic[i,"Volume"]
cum <- cum+totdomestic[i,"Volume"]
}
View(totdomestic)
sum(totdomestic$Volume)
cdf <- ggplot(data=totdomestic,aes(x=rank,y=cum))
cdf + geom_step()
base2 <- ggplot(data=totdomestic)
base2 + geom_bar(aes(y=Volume,x=name),stat="identity") + theme(axis.text.x = element_text(angle=90,hjust=1))
base2 + geom_density(aes(x=rank,weight=Volume)) + theme(axis.text.x = element_text(angle=90,hjust=1))
base2 + geom_density(aes(x=rank,weight=Volume/sum(Volume))) + theme(axis.text.x = element_text(angle=90,hjust=1))
cdf <- ggplot(data=totdomestic,aes(x=rank,y=cum/sum(Volume)))
cdf + geom_step()
q()
