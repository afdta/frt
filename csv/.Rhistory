} else{
state <- sample(states$sleep,1)
}
} #end outer else-block
val <- sum(weights*c(state,previous),na.rm=TRUE)
previous <<- val
return(data.frame(day=daynum,div=i,activity=val))
}
L <- lapply(0:((numdays*numticks)-1),makeRow)
LL <- do.call(rbind,L)
ggplot(LL) + geom_tile(aes(x=div,y=day,fill=activity)) + scale_x_continuous(breaks=seq(0,143,6))
ggplot(LL) + geom_tile(aes(x=div,y=day,fill=activity)) + scale_x_continuous(breaks=seq(0,143,6)) + scale_fill_gradient(low="blue",high="red")
ggplot(LL) + geom_tile(aes(x=div,y=day,fill=activity)) + scale_x_continuous(breaks=seq(0,143,6)) + scale_fill_gradient(high="red")
ggplot(LL) + geom_tile(aes(x=div,y=day,fill=activity)) + scale_x_continuous(breaks=seq(0,143,6)) # + scale_fill_gradient(low="blue",high="red")
q()
library(htables)
t1 <- readDF("/home/alec/Dropbox/Projects/Brookings/Misc/EnglishSkillsTables/csv/table1.csv",list(colWidths=c(41,21,19,19),textAlign=c("left","right","right","right")))
t2 <- readDF("/home/alec/Dropbox/Projects/Brookings/Misc/EnglishSkillsTables/csv/table2.csv",list(colWidths=c(46,19,16,19),textAlign=c("left","right","right","right")))
t3 <- readDF("/home/alec/Dropbox/Projects/Brookings/Misc/EnglishSkillsTables/csv/table3.csv",list(colWidths=c(7,59,17,17),textAlign=c("left","left","right","right")))
t4 <- readDF("/home/alec/Dropbox/Projects/Brookings/Misc/EnglishSkillsTables/csv/Table4.csv",list(colWidths=c(7,76,17),textAlign=c("left","left","right")))
tables <- c(t1,t2,t3,t4)
writeLines(tables,"/home/alec/Dropbox/Projects/Brookings/Misc/EnglishSkillsTables/Tables1_4.html")
writeLines(tables,"/home/alec/Dropbox/Projects/Brookings/Misc/EnglishSkillsTables/Tables1_4.html")
q()
q()
install.packages("knitr")
install.packages("knitr")
summary(cars)
plot(cars)
load("/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/RDat.RData")
View(sums)
collapseSex <- c("TOT_POP", "TOT", "TOT", "WA", "WA",
"BA", "BA", "IA", "IA", "AA", "AA",
"NA", "NA", "TOM", "TOM", "WAC",
"WAC", "BAC", "BAC", "IAC", "IAC",
"AAC", "AAC", "NAC", "NAC", "NH",
"NH", "NHWA", "NHWA", "NHBA", "NHBA",
"NHIA", "NHIA", "NHAA", "NHAA", "NHNA",
"NHNA", "NHTOM", "NHTOM", "NHWAC", "NHWAC",
"NHBAC", "NHBAC", "NHIAC", "NHIAC", "NHAAC",
"NHAAC", "NHNAC", "NHNAC", "H", "H",
"HWA", "HWA", "HBA", "HBA", "HIA",
"HIA", "HAA", "HAA", "HNA", "HNA",
"HTOM", "HTOM", "HWAC", "HWAC", "HBAC",
"HBAC", "HIAC", "HIAC", "HAAC", "HAAC",
"HNAC", "HNAC")
collapseSex <- data.frame(Group=vars,Group2=collapseSex)
vars <- c("TOT_POP", "TOT_MALE", "TOT_FEMALE", "WA_MALE", "WA_FEMALE",
"BA_MALE", "BA_FEMALE", "IA_MALE", "IA_FEMALE", "AA_MALE", "AA_FEMALE",
"NA_MALE", "NA_FEMALE", "TOM_MALE", "TOM_FEMALE", "WAC_MALE",
"WAC_FEMALE", "BAC_MALE", "BAC_FEMALE", "IAC_MALE", "IAC_FEMALE",
"AAC_MALE", "AAC_FEMALE", "NAC_MALE", "NAC_FEMALE", "NH_MALE",
"NH_FEMALE", "NHWA_MALE", "NHWA_FEMALE", "NHBA_MALE", "NHBA_FEMALE",
"NHIA_MALE", "NHIA_FEMALE", "NHAA_MALE", "NHAA_FEMALE", "NHNA_MALE",
"NHNA_FEMALE", "NHTOM_MALE", "NHTOM_FEMALE", "NHWAC_MALE", "NHWAC_FEMALE",
"NHBAC_MALE", "NHBAC_FEMALE", "NHIAC_MALE", "NHIAC_FEMALE", "NHAAC_MALE",
"NHAAC_FEMALE", "NHNAC_MALE", "NHNAC_FEMALE", "H_MALE", "H_FEMALE",
"HWA_MALE", "HWA_FEMALE", "HBA_MALE", "HBA_FEMALE", "HIA_MALE",
"HIA_FEMALE", "HAA_MALE", "HAA_FEMALE", "HNA_MALE", "HNA_FEMALE",
"HTOM_MALE", "HTOM_FEMALE", "HWAC_MALE", "HWAC_FEMALE", "HBAC_MALE",
"HBAC_FEMALE", "HIAC_MALE", "HIAC_FEMALE", "HAAC_MALE", "HAAC_FEMALE",
"HNAC_MALE", "HNAC_FEMALE")
collapseSex <- c("TOT_POP", "TOT", "TOT", "WA", "WA",
"BA", "BA", "IA", "IA", "AA", "AA",
"NA", "NA", "TOM", "TOM", "WAC",
"WAC", "BAC", "BAC", "IAC", "IAC",
"AAC", "AAC", "NAC", "NAC", "NH",
"NH", "NHWA", "NHWA", "NHBA", "NHBA",
"NHIA", "NHIA", "NHAA", "NHAA", "NHNA",
"NHNA", "NHTOM", "NHTOM", "NHWAC", "NHWAC",
"NHBAC", "NHBAC", "NHIAC", "NHIAC", "NHAAC",
"NHAAC", "NHNAC", "NHNAC", "H", "H",
"HWA", "HWA", "HBA", "HBA", "HIA",
"HIA", "HAA", "HAA", "HNA", "HNA",
"HTOM", "HTOM", "HWAC", "HWAC", "HBAC",
"HBAC", "HIAC", "HIAC", "HAAC", "HAAC",
"HNAC", "HNAC")
dput(unique(collapseSex))
collapseSex <- c("TOT_POP", "TOT", "TOT", "WA", "WA",
"BA", "BA", "IA", "IA", "AA", "AA",
"NA", "NA", "TOM", "TOM", "WAC",
"WAC", "BAC", "BAC", "IAC", "IAC",
"AAC", "AAC", "NAC", "NAC", "NH",
"NH", "NHWA", "NHWA", "NHBA", "NHBA",
"NHIA", "NHIA", "NHAA", "NHAA", "NHNA",
"NHNA", "NHTOM", "NHTOM", "NHWAC", "NHWAC",
"NHBAC", "NHBAC", "NHIAC", "NHIAC", "NHAAC",
"NHAAC", "NHNAC", "NHNAC", "H", "H",
"HWA", "HWA", "HBA", "HBA", "HIA",
"HIA", "HAA", "HAA", "HNA", "HNA",
"HTOM", "HTOM", "HWAC", "HWAC", "HBAC",
"HBAC", "HIAC", "HIAC", "HAAC", "HAAC",
"HNAC", "HNAC")
collapseHispanic <- c("TOT_POP", "TOT", "TOT", "WA", "WA",
"BA", "BA", "IA", "IA", "AA", "AA",
"NA", "NA", "TOM", "TOM", "WAC",
"WAC", "BAC", "BAC", "IAC", "IAC",
"AAC", "AAC", "NAC", "NAC", "NH",
"NH", "NHWA", "NHWA", "NHBA", "NHBA",
"NHIA", "NHIA", "NHAA", "NHAA", "NHNA",
"NHNA", "NHTOM", "NHTOM", "NHWAC", "NHWAC",
"NHBAC", "NHBAC", "NHIAC", "NHIAC", "NHAAC",
"NHAAC", "NHNAC", "NHNAC", "H1", "H1",
"H2", "H2", "H2", "H2", "H2",
"H2", "H2", "H2", "H2", "H2",
"H2", "H2", "H3", "H3", "H3",
"H3", "H3", "H3", "H3", "H3",
"H3", "H3")
collapseSex <- data.frame(Group=vars,Group2=collapseSex,Group3=collapseHispanic)
collapseSe
collapseSex
View(collapseSex)
collapseSex <- collapseSex[!duplicated(collapseSex$Group2),]
View(collapseSex)
collapseSex <- c("TOT_POP", "TOT", "TOT", "WA", "WA",
"BA", "BA", "IA", "IA", "AA", "AA",
"NA", "NA", "TOM", "TOM", "WAC",
"WAC", "BAC", "BAC", "IAC", "IAC",
"AAC", "AAC", "NAC", "NAC", "NH",
"NH", "NHWA", "NHWA", "NHBA", "NHBA",
"NHIA", "NHIA", "NHAA", "NHAA", "NHNA",
"NHNA", "NHTOM", "NHTOM", "NHWAC", "NHWAC",
"NHBAC", "NHBAC", "NHIAC", "NHIAC", "NHAAC",
"NHAAC", "NHNAC", "NHNAC", "H", "H",
"HWA", "HWA", "HBA", "HBA", "HIA",
"HIA", "HAA", "HAA", "HNA", "HNA",
"HTOM", "HTOM", "HWAC", "HWAC", "HBAC",
"HBAC", "HIAC", "HIAC", "HAAC", "HAAC",
"HNAC", "HNAC")
collapseHispanic <- c("TOT_POP", "TOT", "TOT", "WA", "WA",
"BA", "BA", "IA", "IA", "AA", "AA",
"NA", "NA", "TOM", "TOM", "WAC",
"WAC", "BAC", "BAC", "IAC", "IAC",
"AAC", "AAC", "NAC", "NAC", "NH",
"NH", "NHWA", "NHWA", "NHBA", "NHBA",
"NHIA", "NHIA", "NHAA", "NHAA", "NHNA",
"NHNA", "NHTOM", "NHTOM", "NHWAC", "NHWAC",
"NHBAC", "NHBAC", "NHIAC", "NHIAC", "NHAAC",
"NHAAC", "NHNAC", "NHNAC", "H1", "H1",
"H2", "H2", "H2", "H2", "H2",
"H2", "H2", "H2", "H2", "H2",
"H2", "H2", "H3", "H3", "H3",
"H3", "H3", "H3", "H3", "H3",
"H3", "H3")
collapseSex <- data.frame(Group=vars,Group2=collapseSex,Group3=collapseHispanic)
collapseSex <- collapseSex[!duplicated(collapseSex$Group2),]
sums <- merge(sums,collapseSex[c("Group2","Group3")],by="Group2")
sums <- aggregate(sums["Pop"],by=sums[c("SUMLEV","STATE","COUNTY","STNAME","CTYNAME","YEAR","Group3","Age2")],sum)
save(sums, file="/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/RDat_HispanicCollapsed.RData")
match(1:3,-5:5)
sums2 <- sums[sums$Group3 %in% keep,]
keep <- c("TOT_POP", "TOT", "NH", "NHWA", "NHBA", "NHIA", "NHAA", "NHNA", "NHTOM", "H2")
sums2 <- sums[sums$Group3 %in% keep,]
cSplit <- split(sums2,sums2$stcofips)
sums$stcofips <- ifelse(sums$STATE<10,paste("0",sums$STATE,sep=""),sums$STATE)
sums$stcofips <- paste("C",sums$stcofips, ifelse(sums$COUNTY<10,paste("00",sums$COUNTY,sep=""),ifelse(sums$COUNTY<100,paste("0",sums$COUNTY,sep=""),as.character(sums$COUNTY))),sep="")
sums2 <- sums[sums$Group3 %in% keep,]
cSplit <- split(sums2,sums2$stcofips)
head(sums2)
lapply
list(a=1)
is.vector(list(a=1))
sapply
lapply
load("/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/RDat_HispanicCollapsed.RData")
keep <- c("TOT_POP", "TOT", "NH", "NHWA", "NHBA", "NHIA", "NHAA", "NHNA", "NHTOM", "H2")
sums2 <- sums[sums$Group3 %in% keep,]
sums$stcofips <- ifelse(sums$STATE<10,paste("0",sums$STATE,sep=""),sums$STATE)
sums$stcofips <- paste("C",sums$stcofips, ifelse(sums$COUNTY<10,paste("00",sums$COUNTY,sep=""),ifelse(sums$COUNTY<100,paste("0",sums$COUNTY,sep=""),as.character(sums$COUNTY))),sep="")
keep <- c("TOT_POP", "TOT", "NH", "NHWA", "NHBA", "NHIA", "NHAA", "NHNA", "NHTOM", "H2")
sums2 <- sums[sums$Group3 %in% keep,]
cSplit <- split(sums2,sums2$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,e$Group3)
ret <- lapply(eSplit,function(e){
eSplit <- split(e[c("Age2","Pop")],e$Age2)
return(lapply(eSplit,function(e){
return(e$Pop)
}))
})
return(ret)
})
library(jsonlite)
json <- toJSON(cSplit2,na="null")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
casted <- dcast(sums2, SUMLEV+STATE+COUNTY+STNAME+CTYNAME+YEAR~Group3+Age2, value.var="Pop")
cSplit <- split(sums2[1:1000,],sums2$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,e$Group3)
ret <- lapply(eSplit,function(e){
eSplit <- split(e[c("Age2","Pop")],e$Age2)
return(lapply(eSplit,function(e){
return(e$Pop)
}))
})
return(ret)
})
sums3 <- sums2[1:1000,]
cSplit <- split(sums3,sums3$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,e$Group3)
ret <- lapply(eSplit,function(e){
eSplit <- split(e[c("Age2","Pop")],e$Age2)
return(lapply(eSplit,function(e){
return(e$Pop)
}))
})
return(ret)
})
View(sums3)
cSplit <- split(sums3,sums3$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,e$Group3)
ret <- lapply(eSplit,function(e){
eSplit <- split(e[c("Age2","Pop")],e$Age2)
return(lapply(eSplit,function(e){
return(e$Pop)
}))
})
return(ret)
})
library(jsonlite)
json <- toJSON(cSplit2,na="null")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
sums3 <- sums2[200:250,]
cSplit <- split(sums3,sums3$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,e$Group3)
ret <- lapply(eSplit,function(e){
eSplit <- split(e[c("Age2","Pop")],e$Age2)
return(lapply(eSplit,function(e){
return(e$Pop)
}))
})
return(ret)
})
json <- toJSON(cSplit2,na="null")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,as.character(e$Group3))
ret <- lapply(eSplit,function(e){
eSplit <- split(e[c("Age2","Pop")],as.character(e$Age2))
return(lapply(eSplit,function(e){
return(e$Pop)
}))
})
return(ret)
})
json <- toJSON(cSplit2,na="null")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
a<- data.frame(a=c(1,2,3,1,2,3),b=1:6)
split(a,a$a)
sums2 <- sums2[order(sums2$STATE,sums2$COUNTY,sums2$Group3,sums2$Age2),]
View(sums2)
cSplit <- split(sums2,sums2$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,as.character(e$Group3))
ret <- lapply(eSplit,function(e){
eSplit <- split(e[c("Age2","Pop")],as.character(e$Age2))
return(lapply(eSplit,function(e){
return(e$Pop)
}))
})
return(ret)
})
json <- toJSON(cSplit2,na="null")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
sums2[1:25,]
Autauga <- sums2[sums2$stcofips=="C01001",]
Autauga
exdf
library(metromonitor)
exdf
dxdf(Autauga)
exdf(Autauga)
load("/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/RDat.RData")
load("/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/RDat_HispanicCollapsed.RData")
json <- toJSON(cSplit2,na="null",factor="integer")
library(reshape2)
a<-data.frame(pop=1:5,age=c("a","b","c","d","e"))
a
dcast(a,~age,value.var="pop")
dcast(a,~age,value.var="pop")
str(a)
dcast(a,1~age,value.var="pop")
dcast(a,.~age,value.var="pop")
str(dcast(a,.~age,value.var="pop"))
a
matrix(1:5,nrow=1,dimnames=list(null,c("a","b","c","d","e")))
matrix(1:5,nrow=1,dimnames=list(NULL,c("a","b","c","d","e")))
library(reshape2)
cSplit <- split(Autauga,Autauga$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,as.character(e$Group3))
ret <- lapply(eSplit,function(e){
return(matrix(eSplit$Pop,nrow=1,dimnames=list(NULL,eSplit$Age2)))
})
return(ret)
})
matrix(1:5,nrow=1,dimnames=list(NULL,c("a","b","c","d","e")))
library(reshape2)
cSplit <- split(Autauga,Autauga$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,as.character(e$Group3))
ret <- lapply(eSplit,function(e){
return(matrix(e$Pop,nrow=1,dimnames=list(NULL,e$Age2)))
})
return(ret)
})
library(jsonlite)
json <- toJSON(cSplit2,na="null",factor="integer")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
cSplit2
json <- toJSON(cSplit2,na="null")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,as.character(e$Group3))
ret <- lapply(eSplit,function(e){
return(as.data.frame(matrix(e$Pop,nrow=1,dimnames=list(NULL,e$Age2))))
})
return(ret)
})
library(jsonlite)
json <- toJSON(cSplit2,na="null")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
cSplit2
cSplit <- split(Autauga,Autauga$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,as.character(e$Group3))
ret <- lapply(eSplit,function(e){
v <- e$Pop
names(v) <- e$Age2
return(v)
})
return(ret)
})
library(jsonlite)
json <- toJSON(cSplit2,na="null")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
library(reshape2)
cSplit <- split(Autauga,Autauga$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,as.character(e$Group3))
ret <- lapply(eSplit,function(e){
v <- as.vector(e$Pop, mode="list")
names(v) <- e$Age2
return(v)
})
return(ret)
})
library(jsonlite)
json <- toJSON(cSplit2,na="null")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
keep <- c("TOT_POP", "TOT", "NH", "NHWA", "NHBA", "NHIA", "NHAA", "NHNA", "NHTOM", "H2")
sums2 <- sums[sums$Group3 %in% keep,]
sums2 <- sums2[order(sums2$STATE,sums2$COUNTY,sums2$Group3,sums2$Age2),]
cSplit <- split(sums2,sums2$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,as.character(e$Group3))
ret <- lapply(eSplit,function(e){
v <- as.vector(e$Pop, mode="list")
names(v) <- e$Age2
return(v)
})
return(ret)
})
sums$stcofips <- ifelse(sums$STATE<10,paste("0",sums$STATE,sep=""),sums$STATE)
sums$stcofips <- paste("C",sums$stcofips, ifelse(sums$COUNTY<10,paste("00",sums$COUNTY,sep=""),ifelse(sums$COUNTY<100,paste("0",sums$COUNTY,sep=""),as.character(sums$COUNTY))),sep="")
keep <- c("TOT_POP", "TOT", "NH", "NHWA", "NHBA", "NHIA", "NHAA", "NHNA", "NHTOM", "H2")
sums2 <- sums[sums$Group3 %in% keep,]
sums2 <- sums2[order(sums2$STATE,sums2$COUNTY,sums2$Group3,sums2$Age2),]
cSplit <- split(sums2,sums2$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,as.character(e$Group3))
ret <- lapply(eSplit,function(e){
v <- as.vector(e$Pop, mode="list")
names(v) <- e$Age2
return(v)
})
return(ret)
})
json <- toJSON(cSplit2,na="null",factor="integer")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
levels(as.factor(sums2$stcofips))
levels(as.factor(sums2$Group3))
levels(as.factor(as.character(sums2$Group3)))
dput(levels(as.factor(as.character(sums2$Group3))))
dput(levels(as.factor(as.character(sums2$Age2))))
dput(levels(as.factor(sums2$stcofips)))
q()
load("/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/RDat.RData")
aggregate(sums["Pop"],by=sums[c("Group2","Age2")],max)
MAX <- aggregate(sums["Pop"],by=sums[c("Group2","Age2")],max)
View(MAX)
MAX[MAX$Group2=="TOT",]
ALLMAX<-MAX[MAX$Group2=="TOT",]
ALLMAX
sum(ALLMAX[1:7,"Pop"])
SUM <- aggregate(sums["Pop"],by=sums[c("Group2","Age2")],sum)
ALLSUM<-SUM[SUM$Group2=="TOT",]
ALLSUM
ALLMAX
counties <- unique(sums[c("stcofips","CTYNAME")])
counties
counties <- unique(sums[c("stcofips","CTYNAME","STNAME")])
counties
countysplit <- split(counties[c("CTYNAME","STNAME")],counties$stcofips)
countyJSON <- toJSON(countysplit)
library(jsonlite)
countyJSON <- toJSON(countysplit)
countyJSON
countysplit2 <- lapply(countysplit, function(e){return(paste(e[1,"CTYNAME"],e[1,"STNAME"],sep=", "))})
countysplit2
countyJSON <- toJSON(countysplit2)
countyJSON
countyJSON <- toJSON(countysplit2,auto_unbox=TRUE)
countyJSON
writeLines(countyJSON,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countyNames.json")
sums[sums$stcofips=="C48301",]
q()
load("/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/RDat.RData")
c <- levels(factor(sums$stcofips))
library(rgdal)
countyMap <- readOGR("/home/alec/Dropbox/Projects/Brookings/DataViz/QuickMap/build",layer="gz_2010_us_050_00_20m.dbf")
countyMap <- readOGR("/home/alec/Dropbox/Projects/Brookings/DataViz/QuickMap/build/",layer="gz_2010_us_050_00_20m.dbf")
countyMap <- readOGR(dsn="/home/alec/Dropbox/Projects/Brookings/DataViz/QuickMap/build/",layer="gz_2010_us_050_00_20m.dbf")
countyMap <- readOGR(dsn="/home/alec/Dropbox/Projects/Brookings/DataViz/QuickMap/build/",layer="gz_2010_us_050_00_20m")
plot(countyMap)
head(countyMap@data)
states<-levels(factor(countyMap@data))
states<-levels(factor(countyMap@data$STATE))
states
countyMap2 <- countyMap[countyMap@data$STATE!="72",]
nrow(countyMap2@data)
source("/home/alec/Dropbox/Projects/Brookings/DataViz/FreightFlows/R/1. Import and Process.R")
#Code that, for a place, pulls top 'num' flows and rolls up the others
sumByComm <- aggregate(flows["Value_2010"],flows[c("Metro_Code","Group_ID")],"sum")
maxByComm <- aggregate(sumByComm["Value_2010"],sumByComm["Group_ID"],"max")
getFlow <- function(geoID,geoNM,num=50){
e <- as.character(geoID) #convert to character
#extract data for this (domestic) code
AllDat <- flows[as.character(flows$Metro_Code)==e,c("Metro_Code","Trader_Code","Value_2010","Group_ID")]
AllDat$Group_ID <- paste("comm",AllDat$Group_ID,sep="")
datList <- split(AllDat,AllDat$Group_ID)
groupOperator <- function(dat){
dat <- dat[order(dat$Value_2010,decreasing=TRUE),]
tot <- sum(dat$Value_2010)
comm <- as.numeric(sub("comm","",unique(dat$Group_ID)))
if(length(comm)==1){
if(comm==0){
commNm <- "All Commodities (Total Trade)"
} else{
commNm <- commlookup[commlookup$Group_ID==comm,"Commodity_Group"]
}
maxVal <- maxByComm[maxByComm$Group_ID==comm,"Value_2010"]
} else{
commNm <- ""
maxVal <- NA
warning("Problem detecting the commodity group name")
}
N <- nrow(dat)
if(N==0){warning("WARNING: No data for selected geography.")}
cum <- 0
names(dat) <- c("Metro1","Metro2","Value","GroupID")
whatShare <- function(e){
cum <<- e + cum
return(cum/tot)
}
shares <- sapply(dat$Value,whatShare)
if(num >= N){
warning(paste("You've selected",num, "flows.","The data contain",N,"flows."))
keepers <- dat
otherTotal <- 0
} else{
keepers <- dat[1:num,]
others <- dat[(num+1):N,]
otherTotal <- sum(others$Value)
print(paste("Rolling up",nrow(others),"observations into an 'other' category, accounting for",otherTotal,"dollars, or",round(otherTotal/tot,4),"of all value."))
}
#print(which(duplicated(keepers$Metro2)))
#keepers <- aggregate(keepers["Value"],by=keepers["Metro2"],sum) #why would you need this
#keepers <- keepers[order(keepers$Value,decreasing=TRUE),]
row_num_check <- nrow(keepers)
keepers <- merge(keepers,lookup2[c("Geo_ID","fullname","Viz_Tick","CensusDiv")],by.x="Metro2",by.y="Geo_ID")
if(row_num_check!=nrow(keepers)){stop("Bad lookup of geo names")}
keepers <- keepers[order(keepers$Value,decreasing=TRUE),c("fullname","Metro2","CensusDiv","Value")]
names(keepers) <- c("nm","id","div","val")
keepers <- rbind(keepers,data.frame(nm="Aggregate of Other Flows",id="OTHER",div="OTHER",val=otherTotal))
return(list(focusGeoName=geoNM,commNM=commNm,focusGeoVal=tot,allGeoMax=maxVal,flows=keepers))
}
RET <- lapply(datList,groupOperator)
return(RET)
}
library(jsonlite)
for(i in 1:nrow(lookupD)){
writeLines(toJSON(getFlow(lookupD[i,"Geo_ID"],lookupD[i,"fullname"])),paste("/home/alec/Dropbox/Projects/Brookings/DataViz/FreightFlows/json/detailed_flows/",lookupD[i,"Geo_ID"],".json",sep=""))
}
q()
