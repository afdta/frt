"AAC", "AAC", "NAC", "NAC", "NH",
"NH", "NHWA", "NHWA", "NHBA", "NHBA",
"NHIA", "NHIA", "NHAA", "NHAA", "NHNA",
"NHNA", "NHTOM", "NHTOM", "NHWAC", "NHWAC",
"NHBAC", "NHBAC", "NHIAC", "NHIAC", "NHAAC",
"NHAAC", "NHNAC", "NHNAC", "H", "H",
"HWA", "HWA", "HBA", "HBA", "HIA",
"HIA", "HAA", "HAA", "HNA", "HNA",
"HTOM", "HTOM", "HWAC", "HWAC", "HBAC",
"HBAC", "HIAC", "HIAC", "HAAC", "HAAC",
"HNAC", "HNAC")
collapseHispanic <- c("TOT_POP", "TOT", "TOT", "WA", "WA",
"BA", "BA", "IA", "IA", "AA", "AA",
"NA", "NA", "TOM", "TOM", "WAC",
"WAC", "BAC", "BAC", "IAC", "IAC",
"AAC", "AAC", "NAC", "NAC", "NH",
"NH", "NHWA", "NHWA", "NHBA", "NHBA",
"NHIA", "NHIA", "NHAA", "NHAA", "NHNA",
"NHNA", "NHTOM", "NHTOM", "NHWAC", "NHWAC",
"NHBAC", "NHBAC", "NHIAC", "NHIAC", "NHAAC",
"NHAAC", "NHNAC", "NHNAC", "H1", "H1",
"H2", "H2", "H2", "H2", "H2",
"H2", "H2", "H2", "H2", "H2",
"H2", "H2", "H3", "H3", "H3",
"H3", "H3", "H3", "H3", "H3",
"H3", "H3")
collapseSex <- data.frame(Group=vars,Group2=collapseSex,Group3=collapseHispanic)
collapseSe
collapseSex
View(collapseSex)
collapseSex <- collapseSex[!duplicated(collapseSex$Group2),]
View(collapseSex)
collapseSex <- c("TOT_POP", "TOT", "TOT", "WA", "WA",
"BA", "BA", "IA", "IA", "AA", "AA",
"NA", "NA", "TOM", "TOM", "WAC",
"WAC", "BAC", "BAC", "IAC", "IAC",
"AAC", "AAC", "NAC", "NAC", "NH",
"NH", "NHWA", "NHWA", "NHBA", "NHBA",
"NHIA", "NHIA", "NHAA", "NHAA", "NHNA",
"NHNA", "NHTOM", "NHTOM", "NHWAC", "NHWAC",
"NHBAC", "NHBAC", "NHIAC", "NHIAC", "NHAAC",
"NHAAC", "NHNAC", "NHNAC", "H", "H",
"HWA", "HWA", "HBA", "HBA", "HIA",
"HIA", "HAA", "HAA", "HNA", "HNA",
"HTOM", "HTOM", "HWAC", "HWAC", "HBAC",
"HBAC", "HIAC", "HIAC", "HAAC", "HAAC",
"HNAC", "HNAC")
collapseHispanic <- c("TOT_POP", "TOT", "TOT", "WA", "WA",
"BA", "BA", "IA", "IA", "AA", "AA",
"NA", "NA", "TOM", "TOM", "WAC",
"WAC", "BAC", "BAC", "IAC", "IAC",
"AAC", "AAC", "NAC", "NAC", "NH",
"NH", "NHWA", "NHWA", "NHBA", "NHBA",
"NHIA", "NHIA", "NHAA", "NHAA", "NHNA",
"NHNA", "NHTOM", "NHTOM", "NHWAC", "NHWAC",
"NHBAC", "NHBAC", "NHIAC", "NHIAC", "NHAAC",
"NHAAC", "NHNAC", "NHNAC", "H1", "H1",
"H2", "H2", "H2", "H2", "H2",
"H2", "H2", "H2", "H2", "H2",
"H2", "H2", "H3", "H3", "H3",
"H3", "H3", "H3", "H3", "H3",
"H3", "H3")
collapseSex <- data.frame(Group=vars,Group2=collapseSex,Group3=collapseHispanic)
collapseSex <- collapseSex[!duplicated(collapseSex$Group2),]
sums <- merge(sums,collapseSex[c("Group2","Group3")],by="Group2")
sums <- aggregate(sums["Pop"],by=sums[c("SUMLEV","STATE","COUNTY","STNAME","CTYNAME","YEAR","Group3","Age2")],sum)
save(sums, file="/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/RDat_HispanicCollapsed.RData")
match(1:3,-5:5)
sums2 <- sums[sums$Group3 %in% keep,]
keep <- c("TOT_POP", "TOT", "NH", "NHWA", "NHBA", "NHIA", "NHAA", "NHNA", "NHTOM", "H2")
sums2 <- sums[sums$Group3 %in% keep,]
cSplit <- split(sums2,sums2$stcofips)
sums$stcofips <- ifelse(sums$STATE<10,paste("0",sums$STATE,sep=""),sums$STATE)
sums$stcofips <- paste("C",sums$stcofips, ifelse(sums$COUNTY<10,paste("00",sums$COUNTY,sep=""),ifelse(sums$COUNTY<100,paste("0",sums$COUNTY,sep=""),as.character(sums$COUNTY))),sep="")
sums2 <- sums[sums$Group3 %in% keep,]
cSplit <- split(sums2,sums2$stcofips)
head(sums2)
lapply
list(a=1)
is.vector(list(a=1))
sapply
lapply
load("/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/RDat_HispanicCollapsed.RData")
keep <- c("TOT_POP", "TOT", "NH", "NHWA", "NHBA", "NHIA", "NHAA", "NHNA", "NHTOM", "H2")
sums2 <- sums[sums$Group3 %in% keep,]
sums$stcofips <- ifelse(sums$STATE<10,paste("0",sums$STATE,sep=""),sums$STATE)
sums$stcofips <- paste("C",sums$stcofips, ifelse(sums$COUNTY<10,paste("00",sums$COUNTY,sep=""),ifelse(sums$COUNTY<100,paste("0",sums$COUNTY,sep=""),as.character(sums$COUNTY))),sep="")
keep <- c("TOT_POP", "TOT", "NH", "NHWA", "NHBA", "NHIA", "NHAA", "NHNA", "NHTOM", "H2")
sums2 <- sums[sums$Group3 %in% keep,]
cSplit <- split(sums2,sums2$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,e$Group3)
ret <- lapply(eSplit,function(e){
eSplit <- split(e[c("Age2","Pop")],e$Age2)
return(lapply(eSplit,function(e){
return(e$Pop)
}))
})
return(ret)
})
library(jsonlite)
json <- toJSON(cSplit2,na="null")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
casted <- dcast(sums2, SUMLEV+STATE+COUNTY+STNAME+CTYNAME+YEAR~Group3+Age2, value.var="Pop")
cSplit <- split(sums2[1:1000,],sums2$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,e$Group3)
ret <- lapply(eSplit,function(e){
eSplit <- split(e[c("Age2","Pop")],e$Age2)
return(lapply(eSplit,function(e){
return(e$Pop)
}))
})
return(ret)
})
sums3 <- sums2[1:1000,]
cSplit <- split(sums3,sums3$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,e$Group3)
ret <- lapply(eSplit,function(e){
eSplit <- split(e[c("Age2","Pop")],e$Age2)
return(lapply(eSplit,function(e){
return(e$Pop)
}))
})
return(ret)
})
View(sums3)
cSplit <- split(sums3,sums3$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,e$Group3)
ret <- lapply(eSplit,function(e){
eSplit <- split(e[c("Age2","Pop")],e$Age2)
return(lapply(eSplit,function(e){
return(e$Pop)
}))
})
return(ret)
})
library(jsonlite)
json <- toJSON(cSplit2,na="null")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
sums3 <- sums2[200:250,]
cSplit <- split(sums3,sums3$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,e$Group3)
ret <- lapply(eSplit,function(e){
eSplit <- split(e[c("Age2","Pop")],e$Age2)
return(lapply(eSplit,function(e){
return(e$Pop)
}))
})
return(ret)
})
json <- toJSON(cSplit2,na="null")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,as.character(e$Group3))
ret <- lapply(eSplit,function(e){
eSplit <- split(e[c("Age2","Pop")],as.character(e$Age2))
return(lapply(eSplit,function(e){
return(e$Pop)
}))
})
return(ret)
})
json <- toJSON(cSplit2,na="null")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
a<- data.frame(a=c(1,2,3,1,2,3),b=1:6)
split(a,a$a)
sums2 <- sums2[order(sums2$STATE,sums2$COUNTY,sums2$Group3,sums2$Age2),]
View(sums2)
cSplit <- split(sums2,sums2$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,as.character(e$Group3))
ret <- lapply(eSplit,function(e){
eSplit <- split(e[c("Age2","Pop")],as.character(e$Age2))
return(lapply(eSplit,function(e){
return(e$Pop)
}))
})
return(ret)
})
json <- toJSON(cSplit2,na="null")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
sums2[1:25,]
Autauga <- sums2[sums2$stcofips=="C01001",]
Autauga
exdf
library(metromonitor)
exdf
dxdf(Autauga)
exdf(Autauga)
load("/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/RDat.RData")
load("/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/RDat_HispanicCollapsed.RData")
json <- toJSON(cSplit2,na="null",factor="integer")
library(reshape2)
a<-data.frame(pop=1:5,age=c("a","b","c","d","e"))
a
dcast(a,~age,value.var="pop")
dcast(a,~age,value.var="pop")
str(a)
dcast(a,1~age,value.var="pop")
dcast(a,.~age,value.var="pop")
str(dcast(a,.~age,value.var="pop"))
a
matrix(1:5,nrow=1,dimnames=list(null,c("a","b","c","d","e")))
matrix(1:5,nrow=1,dimnames=list(NULL,c("a","b","c","d","e")))
library(reshape2)
cSplit <- split(Autauga,Autauga$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,as.character(e$Group3))
ret <- lapply(eSplit,function(e){
return(matrix(eSplit$Pop,nrow=1,dimnames=list(NULL,eSplit$Age2)))
})
return(ret)
})
matrix(1:5,nrow=1,dimnames=list(NULL,c("a","b","c","d","e")))
library(reshape2)
cSplit <- split(Autauga,Autauga$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,as.character(e$Group3))
ret <- lapply(eSplit,function(e){
return(matrix(e$Pop,nrow=1,dimnames=list(NULL,e$Age2)))
})
return(ret)
})
library(jsonlite)
json <- toJSON(cSplit2,na="null",factor="integer")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
cSplit2
json <- toJSON(cSplit2,na="null")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,as.character(e$Group3))
ret <- lapply(eSplit,function(e){
return(as.data.frame(matrix(e$Pop,nrow=1,dimnames=list(NULL,e$Age2))))
})
return(ret)
})
library(jsonlite)
json <- toJSON(cSplit2,na="null")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
cSplit2
cSplit <- split(Autauga,Autauga$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,as.character(e$Group3))
ret <- lapply(eSplit,function(e){
v <- e$Pop
names(v) <- e$Age2
return(v)
})
return(ret)
})
library(jsonlite)
json <- toJSON(cSplit2,na="null")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
library(reshape2)
cSplit <- split(Autauga,Autauga$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,as.character(e$Group3))
ret <- lapply(eSplit,function(e){
v <- as.vector(e$Pop, mode="list")
names(v) <- e$Age2
return(v)
})
return(ret)
})
library(jsonlite)
json <- toJSON(cSplit2,na="null")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
keep <- c("TOT_POP", "TOT", "NH", "NHWA", "NHBA", "NHIA", "NHAA", "NHNA", "NHTOM", "H2")
sums2 <- sums[sums$Group3 %in% keep,]
sums2 <- sums2[order(sums2$STATE,sums2$COUNTY,sums2$Group3,sums2$Age2),]
cSplit <- split(sums2,sums2$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,as.character(e$Group3))
ret <- lapply(eSplit,function(e){
v <- as.vector(e$Pop, mode="list")
names(v) <- e$Age2
return(v)
})
return(ret)
})
sums$stcofips <- ifelse(sums$STATE<10,paste("0",sums$STATE,sep=""),sums$STATE)
sums$stcofips <- paste("C",sums$stcofips, ifelse(sums$COUNTY<10,paste("00",sums$COUNTY,sep=""),ifelse(sums$COUNTY<100,paste("0",sums$COUNTY,sep=""),as.character(sums$COUNTY))),sep="")
keep <- c("TOT_POP", "TOT", "NH", "NHWA", "NHBA", "NHIA", "NHAA", "NHNA", "NHTOM", "H2")
sums2 <- sums[sums$Group3 %in% keep,]
sums2 <- sums2[order(sums2$STATE,sums2$COUNTY,sums2$Group3,sums2$Age2),]
cSplit <- split(sums2,sums2$stcofips)
cSplit2 <- lapply(cSplit,function(e){
e <- e[,c("Group3","Age2","Pop")]
eSplit <- split(e,as.character(e$Group3))
ret <- lapply(eSplit,function(e){
v <- as.vector(e$Pop, mode="list")
names(v) <- e$Age2
return(v)
})
return(ret)
})
json <- toJSON(cSplit2,na="null",factor="integer")
writeLines(json,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countydat.json")
levels(as.factor(sums2$stcofips))
levels(as.factor(sums2$Group3))
levels(as.factor(as.character(sums2$Group3)))
dput(levels(as.factor(as.character(sums2$Group3))))
dput(levels(as.factor(as.character(sums2$Age2))))
dput(levels(as.factor(sums2$stcofips)))
q()
load("/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/RDat.RData")
aggregate(sums["Pop"],by=sums[c("Group2","Age2")],max)
MAX <- aggregate(sums["Pop"],by=sums[c("Group2","Age2")],max)
View(MAX)
MAX[MAX$Group2=="TOT",]
ALLMAX<-MAX[MAX$Group2=="TOT",]
ALLMAX
sum(ALLMAX[1:7,"Pop"])
SUM <- aggregate(sums["Pop"],by=sums[c("Group2","Age2")],sum)
ALLSUM<-SUM[SUM$Group2=="TOT",]
ALLSUM
ALLMAX
counties <- unique(sums[c("stcofips","CTYNAME")])
counties
counties <- unique(sums[c("stcofips","CTYNAME","STNAME")])
counties
countysplit <- split(counties[c("CTYNAME","STNAME")],counties$stcofips)
countyJSON <- toJSON(countysplit)
library(jsonlite)
countyJSON <- toJSON(countysplit)
countyJSON
countysplit2 <- lapply(countysplit, function(e){return(paste(e[1,"CTYNAME"],e[1,"STNAME"],sep=", "))})
countysplit2
countyJSON <- toJSON(countysplit2)
countyJSON
countyJSON <- toJSON(countysplit2,auto_unbox=TRUE)
countyJSON
writeLines(countyJSON,"/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/countyNames.json")
sums[sums$stcofips=="C48301",]
q()
load("/home/alec/Dropbox/Projects/Brookings/DataViz/DiversityExplosion/data/json/RDat.RData")
c <- levels(factor(sums$stcofips))
library(rgdal)
countyMap <- readOGR("/home/alec/Dropbox/Projects/Brookings/DataViz/QuickMap/build",layer="gz_2010_us_050_00_20m.dbf")
countyMap <- readOGR("/home/alec/Dropbox/Projects/Brookings/DataViz/QuickMap/build/",layer="gz_2010_us_050_00_20m.dbf")
countyMap <- readOGR(dsn="/home/alec/Dropbox/Projects/Brookings/DataViz/QuickMap/build/",layer="gz_2010_us_050_00_20m.dbf")
countyMap <- readOGR(dsn="/home/alec/Dropbox/Projects/Brookings/DataViz/QuickMap/build/",layer="gz_2010_us_050_00_20m")
plot(countyMap)
head(countyMap@data)
states<-levels(factor(countyMap@data))
states<-levels(factor(countyMap@data$STATE))
states
countyMap2 <- countyMap[countyMap@data$STATE!="72",]
nrow(countyMap2@data)
source("/home/alec/Dropbox/Projects/Brookings/DataViz/FreightFlows/R/1. Import and Process.R")
library(ggplot2)
flowList <- split(flows,flows$Group_ID)
#big function to be applied to each member of flowList
squareMatrix <- function(df){
#Commodity code
commCode <- df[1,"Group_ID"]
print(paste("Running data for commodity group",commCode))
#Largest Domestic
sumDomestic <- aggregate(df["Value_2010"],df["Metro_Code"],sum)
sumDomestic <- merge(lookupD,sumDomestic,by.x="Geo_ID",by.y="Metro_Code")
sumDomestic <- sumDomestic[order(sumDomestic$Value_2010,decreasing=TRUE),]
#Largest Foreign
sumForeign <- aggregate(df["Value_2010"],df["Trader_Code"],sum)
sumForeign <- merge(lookupG,sumForeign,by.x="Geo_ID",by.y="Trader_Code")
sumForeign <- sumForeign[order(sumForeign$Value_2010,decreasing=TRUE),]
numDom <- nrow(sumDomestic)
numFor <- nrow(sumForeign)
if(numDom > 75){numDom <- 75}
if(numFor > 25){numFor <- 25}
print(paste("Pulling the top",numDom,"domestic flows and the top",numFor,"foreign flows"))
if(numDom > 0 && numFor > 0){
sums <- rbind(sumDomestic[1:numDom,],sumForeign[1:numFor,]) #top 75 domestic, top 25 foreign
} else if(numDom > 0){
sums <- sumDomestic[1:numDom,]
} else if(numFor > 0){
sums <- sumForeign[1:numFor,]
}
sums <- sums[order(sums$Viz_Tick),]
GC4Matrix <- as.character(sumForeign[1:25,"Geo_ID"])
GlobalCodeStacker <- data.frame(Trader_Code=GC4Matrix,Value_2010=0) #used as a spacer below to round out square matrix
makeRow <- function(e){
e <- as.character(e) #convert to character
#extract data for this code
if(e %in% as.character(lookupD$Geo_ID)){
dat <- df[as.character(df$Metro_Code)==e,c("Metro_Code","Trader_Code","Value_2010")]
dat <- rbind(dat,data.frame(Metro_Code=e,Trader_Code=e,Value_2010=0)) #to complete square matrix
names(dat) <- c("Metro1","Metro2","Value")
} else if(e %in% as.character(lookupG$Geo_ID)){
dat <- df[as.character(df$Trader_Code)==e,c("Trader_Code","Metro_Code","Value_2010")]
GlobalCodeStacker$Metro_Code <- e #since this actually reassigns to GlobalCodeStacker, and assignments are done in local scope (<- vs <<-), it does not affect the outer value (i.e. a local copy is made)
dat <- rbind(dat,GlobalCodeStacker)
names(dat) <- c("Metro1","Metro2","Value")
} else{
print(paste("No data found for:",e))
dat <- data.frame(Metro1=character(0),Metro2=character(0),Value=numeric(0));
}
#need to limit the number of connections to the chosen universe of top 75/25 (matrix must be square)
dat <- dat[as.character(dat$Metro2) %in% as.character(sums$Geo_ID),]
if(nrow(dat) < nrow(sums)){
#if there are missing connections listed, pad the data with 0s
nodata <- sums[!(sums$Geo_ID %in% dat$Metro2),"Geo_ID"]
nodata <- data.frame(Metro2=nodata)
nodata$Metro1 <- e
nodata$Value <- 0
dat <- rbind(dat,nodata)
}
dat[dat$Value < 0.1,"Value"] <- 0 #prevents errors in D3 rendering
#reorder dat so it matches the order of Viz_Tick
if(!is.null(dat)){
dat$order <- factor(dat$Metro2,levels=as.character(sums$Geo_ID)) #row will be sorted in same order as sums
dat <- dat[order(dat$order),]
row <- matrix(dat$Value,nrow=1,dimnames=list(Metro1=e,Metro2=as.character(dat$Metro2)))
}
return(row)
} #end makeRow
getMax <- function(e){
e <- as.character(e) #convert to character
#extract data for this code
if(e %in% as.character(lookupD$Geo_ID)){
dat <- df[as.character(df$Metro_Code)==e,"Value_2010"]
} else if(e %in% as.character(lookupG$Geo_ID)){
dat <- df[as.character(df$Trader_Code)==e,"Value_2010"]
} else{
print(paste("No data found for:",e))
dat <- NULL
}
return(max(dat))
}
allRows <- lapply(sums$Geo_ID,makeRow) #relies on sums being sorted
bigMatrix <- do.call(rbind,allRows)
labels <- sums[c("fullname","CensusDiv","Geo_ID")]
maxVals <- sapply(sums$Geo_ID,getMax)
return(list(data=bigMatrix,places=labels,max=maxVals,commodity=commCode))
}
options(scipen=999)
bigBigMatrix <- lapply(flowList[13],squareMatrix)
library(jsonlite)
bigBigMatrix <- lapply(flowList,squareMatrix)
View(commlookup)
for(i in bigBigMatrix){
writeLines(toJSON(i),paste("/home/alec/Dropbox/Projects/Brookings/DataViz/FreightFlows/json/chord_data/bigMatrix_",i$commodity,".json",sep=""))
}
getFlow <- function(geoID,num=50){
e <- as.character(geoID) #convert to character
#extract data for this (domestic) code
AllDat <- flows[as.character(flows$Metro_Code)==e,c("Metro_Code","Trader_Code","Value_2010","Group_ID")]
AllDat$Group_ID <- paste("comm",AllDat$Group_ID,sep="")
datList <- split(AllDat,AllDat$Group_ID)
groupOperator <- function(dat){
dat <- dat[order(dat$Value_2010,decreasing=TRUE),]
tot <- sum(dat$Value_2010)
N <- nrow(dat)
if(N==0){warning("WARNING: No data for selected geography.")}
cum <- 0
names(dat) <- c("Metro1","Metro2","Value","GroupID")
whatShare <- function(e){
cum <<- e + cum
return(cum/tot)
}
shares <- sapply(dat$Value,whatShare)
if(num >= N){
warning(paste("You've selected",num, "flows.","The data contain",N,"flows."))
keepers <- dat
otherTotal <- 0
} else{
keepers <- dat[1:num,]
others <- dat[(num+1):N,]
otherTotal <- sum(others$Value)
print(paste("Rolling up",nrow(others),"observations into an 'other' category, accounting for",otherTotal,"dollars, or",round(otherTotal/tot,4),"of all value."))
}
#print(which(duplicated(keepers$Metro2)))
#keepers <- aggregate(keepers["Value"],by=keepers["Metro2"],sum) #why would you need this
#keepers <- keepers[order(keepers$Value,decreasing=TRUE),]
row_num_check <- nrow(keepers)
keepers <- merge(keepers,lookup2[c("Geo_ID","fullname","Viz_Tick","CensusDiv")],by.x="Metro2",by.y="Geo_ID")
if(row_num_check!=nrow(keepers)){stop("Bad lookup of geo names")}
keepers <- keepers[order(keepers$Value,decreasing=TRUE),c("fullname","Metro2","CensusDiv","Value")]
names(keepers) <- c("nm","id","div","val")
keepers <- rbind(keepers,data.frame(nm="Aggregate of Other Flows",id="OTHER",div="OTHER",val=otherTotal))
return(keepers)
}
RET <- lapply(datList,groupOperator)
return(RET)
}
for(i in 1:nrow(lookupD[1,])){
writeLines(toJSON(getFlow(lookupD[i,"Geo_ID"])),paste("/home/alec/Dropbox/Projects/Brookings/DataViz/FreightFlows/metflows/",lookupD[i,"Geo_ID"],".json",sep=""))
}
for(i in 1:nrow(lookupD[1,])){
writeLines(toJSON(getFlow(lookupD[i,"Geo_ID"])),paste("/home/alec/Dropbox/Projects/Brookings/DataViz/FreightFlows/json/detailed_flows/",lookupD[i,"Geo_ID"],".json",sep=""))
}
View(lookupD)
library(jsonlite)
for(i in 1:nrow(lookupD)){
writeLines(toJSON(getFlow(lookupD[i,"Geo_ID"])),paste("/home/alec/Dropbox/Projects/Brookings/DataViz/FreightFlows/json/detailed_flows/",lookupD[i,"Geo_ID"],".json",sep=""))
}
